name: Docker Image CI

on:
  # trigger for PRs targeting main
  pull_request:
    branches: ["main"]
    types: [opened, reopened, synchronize, ready_for_review]

  # trigger on direct pushes to main (including merges)
  push:
    branches: ["main"]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_token: ${{ secrets.TOKEN }}
  TF_VAR_secret: ${{ secrets.SECRET }}
  TF_VAR_endpoint: "https://api.clever-cloud.com"
  TF_VAR_organisation: ${{ secrets.ORGANISATION }}
  TF_VAR_secret_key: ${{ secrets.APPLICATION_SECRET_KEY }}
  TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
  TF_VAR_admin_user: ${{ secrets.ADMIN_USER }}
  TF_VAR_env: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # If the event is a pull_request, only run the job when the PR source branch is "dev".
    # If the event is a push, github.event_name == 'push' so the condition evaluates true.
    if: |
      ${{ github.event_name == 'push' }} ||
      ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref == 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show context
        run: |
          echo "Event: $GITHUB_EVENT_NAME"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR #${{ github.event.pull_request.number }} from ${{ github.event.pull_request.head.ref }} -> ${{ github.event.pull_request.base.ref }}"
          else
            echo "Push to ${{ github.ref }}"
          fi

  ##############################################################################
  #                          terraform PLAN                                    #
  ##############################################################################
  # terraform-plan:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.6.6

  #     - name: Terraform Init apply
  #       run: |
  #         terraform init
  #       working-directory: terraform/

  #     - name: Terraform Format Check
  #       run: terraform fmt -check
  #       working-directory: terraform/

  #     - name: Terraform Validate
  #       run: terraform validate
  #       working-directory: terraform/

  #     - name: Terraform Plan
  #       run: terraform plan
  #       working-directory: terraform/

  # ##############################################################################
  # #                          terraform APPLY                                   #
  # ##############################################################################
  # terraform-apply:
  #   runs-on: ubuntu-latest
  #   environment: terraform_holder
  #   needs: [terraform-plan]
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.6.6

  #     - name: Terraform Init apply
  #       run: |
  #         terraform init
  #       working-directory: terraform/

  #     - run: terraform apply -auto-approve
  #       working-directory: terraform/

  # ##############################################################################
  # #                          terraform APPLY                                   #
  # ##############################################################################
  # clever-deploy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install Clever Cloud CLI
  #       run: |
  #         npm install -g clever-tools

  #     - name: Login & deploy with Clever Tools
  #       run: |
  #         npx --yes clever-tools@latest login --token "$CLEVER_TOKEN" --secret "$CLEVER_SECRET"
  #         npx --yes clever-tools@latest deploy --force
  #       env:
  #         CLEVER_TOKEN: ${{ secrets.TOKEN }}
  #         CLEVER_SECRET: ${{ secrets.SECRET }}
  #         FRONTEND_ORIGIN: ${{ secrets.FRONTEND_ORIGIN }}
